Netty基础知识：
    一、chat编码解码器(chat);
    二、自定编码解码器(codec);
    三、拆包及粘包解决(splitPacket);
Netty应用
    四、服务端心跳检测(heartBeat);
    五、客户端断线重连(reconnect);

Netty粘包拆包
    以client发了两个数据包D1和D2为例，在server端可能会收到如下几种情况的数据。
     Client  ---------------------------------------> Server
                      D2            D1
                            D2D1
                      D2_2      D2_1D1
                      D2D1_2      D1_1

     解决方案:
        1）消息定长度，传输的数据大小固定长度，例如每段的长度固定为100字节，如果不够空位补空格，缺点：每次字节不够的话，浪费性能；如果超过固定字节，会被拆包成乱码，比如在uft-8编码中，一个汉字3个字节，传输过程中可能前传2个后传1个，出现两个乱码。
        2）在数据包尾部添加特殊分隔符，比如下划线，中划线等，这种方法简单易行，但选择分隔符的时候一定要注意每条数据的内部一定不能出现分隔符。缺点：传输的数据中如果还有该分隔符会被当做两个包处理。
        3）发送长度：发送每条数据的时候，将数据的长度一并发送，比如可以选择每条数据的前4位是数据的长度，应用层处理时可以根据长度来判断每条数据的开始和结束。这种方法最佳，可自定义使用。
     Netty提供了多个解码器，可以进行分包的操作，如下：
        LineBasedFrameDecoder （回车换行分包）
        DelimiterBasedFrameDecoder（特殊分隔符分包）
        FixedLengthFrameDecoder（固定长度报文来分包）
        自定义长度分包解码器